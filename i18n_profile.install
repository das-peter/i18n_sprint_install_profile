<?php

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function i18n_profile_install() {
  // Trigger default install first.
  require_once dirname(__FILE__) . '/../standard/standard.install';
  standard_install();

  // Add some languages
  $languages = array('en', 'de', 'es');
  $installedLanguages = language_list();
  foreach ($languages as $weight => $langcode) {
    $default = $langcode == 'en';

    if (!isset($installedLanguages[$langcode])) {
      locale_add_language($langcode, NULL, NULL, LANGUAGE_LTR, '', $langcode, TRUE, $default);
      continue;
    }
    db_update('languages')
    ->fields(array(
      'weight' => $weight,
      'prefix' => $langcode, // Make sure every language has a prefix
    ))
    ->condition('language', $langcode)
    ->execute();
    $installedLanguages[$langcode]->prefix = $langcode;
  }
  // Enable this to make sure your default language has a prefix to
  // otherwise you could end up with dead ends on multilingual pages which use
  // path prefixes.
  // variable_set('language_default', $installedLanguages['en']);

  // Configure Language Negotioation
  require_once DRUPAL_ROOT . '/includes/language.inc';
  $language_negotiation_providers = language_negotiation_info();

  // Language detection configuration (interface)
  language_negotiation_set('language', array(
    LOCALE_LANGUAGE_NEGOTIATION_SESSION => $language_negotiation_providers[LOCALE_LANGUAGE_NEGOTIATION_SESSION],
    LOCALE_LANGUAGE_NEGOTIATION_USER => $language_negotiation_providers[LOCALE_LANGUAGE_NEGOTIATION_USER],
    LOCALE_LANGUAGE_NEGOTIATION_URL => $language_negotiation_providers[LOCALE_LANGUAGE_NEGOTIATION_URL],
    LOCALE_LANGUAGE_NEGOTIATION_BROWSER => $language_negotiation_providers[LOCALE_LANGUAGE_NEGOTIATION_BROWSER],
    LANGUAGE_NEGOTIATION_DEFAULT => $language_negotiation_providers[LANGUAGE_NEGOTIATION_DEFAULT],
  ));
  // Detection Adapter Setup - URL
  language_negotiation_set('language_url', array(
    LOCALE_LANGUAGE_NEGOTIATION_URL => $language_negotiation_providers[LOCALE_LANGUAGE_NEGOTIATION_URL],
    LOCALE_LANGUAGE_NEGOTIATION_URL_FALLBACK => $language_negotiation_providers[LOCALE_LANGUAGE_NEGOTIATION_URL_FALLBACK],
  ));
  // Content Language Detection - just base on interface language
  language_negotiation_set('language_content', array(
    LOCALE_LANGUAGE_NEGOTIATION_INTERFACE => $language_negotiation_providers[LOCALE_LANGUAGE_NEGOTIATION_INTERFACE],
    LANGUAGE_NEGOTIATION_DEFAULT => $language_negotiation_providers[LANGUAGE_NEGOTIATION_DEFAULT],
  ));

  // Language Detection Order
  variable_set('locale_language_providers_weight_language', array(
    'locale-session' => -10,
    'locale-user' => -9,
    'locale-url' => -8,
    'locale-browser' => -7,
    'language-default' => -6,
  ));

  // Enable field translations
  variable_set('entity_translation_entity_types', array(
    'node' => 'node',
    'commerce_product' => 'commerce_product',
  ));

  // Enable title replacement for all node bundles.
  $bundles = field_info_bundles('node');
  foreach ($bundles as $bundle => $bundle_info) {
    title_field_replacement_toggle('node', $bundle, 'title');
  }

  _commerce_kickstart_install();
}


/**
 * Performs additional configuration for Drupal Commerce modules and components.
 */
function _commerce_kickstart_install() {
  // Enable Commerce blocks.
  $default_theme = variable_get('theme_default', KICKSTART_DEFAULT_THEME);
  $admin_theme = KICKSTART_ADMIN_THEME;
  $values = array(
    array(
      'module' => 'commerce_cart',
      'delta' => 'cart',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => "cart\ncheckout/*",
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();

  // Insert a product display node type into the database.
  $types = array(
    array(
      'type' => 'product_display',
      'name' => st('Product display'),
      'base' => 'node_content',
      'description' => st('Use <em>product displays</em> to present Add to Cart form for products to your customers.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Update "Product" comment and author information settings.
  variable_set('comment_product_display', COMMENT_NODE_HIDDEN);
  variable_set('node_submitted_product_display', FALSE);

  // Create a default Catalog vocabulary for the Product display node type.
  $description = st('Describes a hierarchy for the product catalog.');
  $vocabulary = (object) array(
    'name' => st('Catalog'),
    'description' => $description,
    'machine_name' => 'catalog',
    'help' => '',
  );
  taxonomy_vocabulary_save($vocabulary);

  $field = array(
    'field_name' => 'taxonomy_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    'cardinality' => 1,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'taxonomy_' . $vocabulary->machine_name,
    'entity_type' => 'node',
    'label' => st('Catalog category'),
    'bundle' => 'product_display',
    'description' => '',
    'widget' => array(
      'type' => 'options_select',
    ),
  );
  field_create_instance($instance);

  // Add a default image field to the basic product type.
  $instance = array(
    'field_name' => 'field_image',
    'entity_type' => 'commerce_product',
    'label' => st('Image'),
    'bundle' => 'product',
    'description' => st('Upload an image for this product.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),

    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => 'file'),
        'weight' => -1,
      ),
      'full' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => 'file'),
        'weight' => -1,
      ),
      'line_item' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'thumbnail', 'image_link' => ''),
        'weight' => -1,
      ),
      'node_full' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => 'file'),
        'weight' => -1,
      ),
      'node_teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'thumbnail', 'image_link' => 'content'),
        'weight' => -1,
      ),
      'node_rss' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => ''),
        'weight' => -1,
      ),
    ),
  );
  field_create_instance($instance);

  // Add a product reference field to the Product display node type.
  $field = array(
    'field_name' => 'field_product',
    'type' => 'commerce_product_reference',
    'cardinality' => 1,
    'translatable' => FALSE,
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_product',
    'entity_type' => 'node',
    'label' => st('Product'),
    'bundle' => 'product_display',
    'description' => 'Choose a product to display for sale.',
    'required' => TRUE,

    'widget' => array(
      'type' => 'options_select',
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'commerce_cart_add_to_cart_form',
      ),
      'full' => array(
        'label' => 'hidden',
        'type' => 'commerce_cart_add_to_cart_form',
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'commerce_cart_add_to_cart_form',
      ),
    ),
  );
  field_create_instance($instance);

  // Give checkout access to anonymous and authenticated users.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access checkout'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access checkout', 'view own orders'));

  // Disable Views' Advanced Help module nag message until it's production ready.
  variable_set('views_hide_help_message', TRUE);

  // Collapse fieldsets on the modules page using Admin Menu's setting.
  variable_set('admin_menu_tweak_modules', TRUE);

  // Add a shortcut set for store administration.
  $set = new stdClass;
  $set->title = st('Store administration');
  $set->links = array(
    array('link_path' => 'admin/commerce/products/add', 'link_title' => st('Add product')),
    array('link_path' => 'node/add/product-display', 'link_title' => st('Add product display')),
    array('link_path' => 'admin/commerce/products', 'link_title' => st('View products')),
    array('link_path' => 'admin/commerce/orders', 'link_title' => st('View orders')),
    array('link_path' => 'admin/commerce/config', 'link_title' => st('Configure store')),
  );
  shortcut_set_save($set);

  // Apply the shortcut set to the first user.
  shortcut_set_assign_user($set, (object) array('uid' => 1));
}